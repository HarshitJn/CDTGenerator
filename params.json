{"name":"Constrained Delaunay Tetrahedralization Generator","tagline":"Implementation of the paper \"Meshing piecewise linear complex using CDT\" by Hang Si et. al","body":"# CDTGenerator\r\nThis project is an implementation of the paper \"Meshing piecewise linear complex using CDT\" by Hang Si et. al. Constrained Delaunay tetrahedralization attempts to retain Delunay property for cells while ensuring preservation of constraint vertices, segments and facets. \r\n\r\n# Terminology\r\nDelaunay: Let V be the set of vertices of X(a PLC). Let σ be any simplex formed by vertices of V . σ is delaunay if there exists a circumsphere of σ that encloses no vertex of V.\r\n\r\nStrongly Delaunay: Let σ be a simplex of X, σ is strongly delaunay if there exists a circumsphere of σ that passes through and encloses no other vertices of X.\r\n\r\nEdge Protected: X is edge-protected if every segment of X is strongly delaunay.\r\n\r\nDelaunay tetrahedralization: A Delaunay tetrahedralization D of V is a tetrahedralization such that all simplices of D are delaunay.\r\n\r\nContrained Delaunay: A tetrahedron t formed by vertices of X is constrained delaunay if its circumsphere encloses no vertex of X which is visible from any point in the relative interior of t.\r\n\r\nRelative Interior: Relative interior of a set contains all points which are not on the \"edge\" of the set,relative to the smallest subspace in which this set lies.\r\n\r\nConstrained tetrahedralization: A tetrahedralization T is a constrained tetrahedralization of X if T and X have exactly the same vertices, and the tetrahedra in T cover the convex hull of V . Every segment of X is an edge of T , every facet of X is a union of triangular faces of T .\r\n\r\nCDT: A constrained tetrahedralization T of X is said to be a constrained delaunay tetrahedralization (CDT) of X if each tetrahedron of T is constrained delaunay.\r\n\r\nLocal Degenracy: Let D be the delaunay tetrahedralization of the vertices of X, t a tetrahedron in D and t' an adjacent tetrahedron of t (sharing a face with t), V the set of vertices of t, t'. If all vertices of V lie on a common sphere, V is called a local degeneracy of X.\r\n\r\nSubfaces: If T is a CDT of X(a PCL). A facet of X is represented by a set of coplanar triangular faces of T. These faces are called subfaces for distinguishing them from other faces of T .\r\n\r\n# Theory\r\nThe paper highlights two ways to get to be sure that a CDT exists.\r\n\r\nShewchuk's theorem: If X is edge protected ,then X has a CDT. \r\n\r\nHang Si's theorem: If D(delaunay tetrahedralization) contains no local degeneracy and contains all segments of X, then the CDT of X exists.According to this theorem, first the given PLC is converted to its delaunay tetrahedralisation followed by making all segments strongly delaunay. The resultant may have local degeneracies which are removed next. But some subfaces might be missing in the new resultant which are recovered using facet recovery algorithm. \r\n\r\nThe implementation is done using the Hang Si's theorem because using this theorem, the facet recovery(last step) can be carried out efficiently.\r\n\r\n## Algorithm overview\r\nAlgorithm is based on [Shewchuck's theorem](www.cs.berkeley.edu/~jrs/papers/cdt.pdf) which states that: 'If a PLC _X_ is _edge protected_ and there are no cospherical 5-points in vertex set of _X_ then CDT of X exists'.\r\n\r\nThis algorithm first transforms the input _Piecewise linear complex_(or PLC) to a PLC which is edge protected and then removes any degenerate point set and then tranformed PLC is guarnateed to have CDT. The new PLC generated by this method is topologically equivalent to the original PLC. Precisely,  \r\n1. Computes initial Delaunay tetrahedralization  \r\n2. Makes segments _strongly delaunay_. This is done by recovering the missing segments of the PLC in the new Delaunay tetrahedralization.  \r\n3. Removes _local_ degeneracies. This is done by either perturbing vertices or inserting new vertices.    \r\n4. Recovers facets using _cavity retetrahedralization_  \r\n\r\n# Dependencies\r\nThis implementation extensively uses CGAL's [Delaunay triangulation](http://doc.cgal.org/latest/Triangulation_3/index.html#Triangulation_3Delaunay) and [Linear Cell complex](http://doc.cgal.org/latest/Linear_cell_complex/index.html) modules. \r\n\r\n# Building\r\nThe code is under testing right now but one can get fair idea of overall steps involved in implementation of Hang Si's Constrained Delaunay tetrahedralization(CDT) algorithm.\r\n\r\n# Extension\r\nMain objective is to extend this implementation to support adaptive Constrained Delaunay tetrahedralization for 3D domain.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}